// TODO: use node_modules/typescript/lib/lib.dom.d.ts instead?
export interface WindowEventMap {
  abort: UIEvent;
  afterprint: Event;
  beforeprint: Event;
  beforeunload: BeforeUnloadEvent;
  blur: FocusEvent;
  canplay: Event;
  canplaythrough: Event;
  change: Event;
  click: MouseEvent;
  compassneedscalibration: Event;
  contextmenu: MouseEvent;
  dblclick: MouseEvent;
  // devicelight: DeviceLightEvent;
  devicemotion: DeviceMotionEvent;
  deviceorientation: DeviceOrientationEvent;
  deviceorientationabsolute: DeviceOrientationEvent;
  drag: DragEvent;
  dragend: DragEvent;
  dragenter: DragEvent;
  dragleave: DragEvent;
  dragover: DragEvent;
  dragstart: DragEvent;
  drop: DragEvent;
  durationchange: Event;
  emptied: Event;
  ended: Event;
  error: ErrorEvent;
  focus: FocusEvent;
  gamepadconnected: GamepadEvent;
  gamepaddisconnected: GamepadEvent;
  hashchange: HashChangeEvent;
  input: Event;
  invalid: Event;
  keydown: KeyboardEvent;
  keypress: KeyboardEvent;
  keyup: KeyboardEvent;
  load: Event;
  loadeddata: Event;
  loadedmetadata: Event;
  loadstart: Event;
  message: MessageEvent;
  mousedown: MouseEvent;
  mouseenter: MouseEvent;
  mouseleave: MouseEvent;
  mousemove: MouseEvent;
  mouseout: MouseEvent;
  mouseover: MouseEvent;
  mouseup: MouseEvent;
  mousewheel: Event;
  MSGestureChange: Event;
  MSGestureDoubleTap: Event;
  MSGestureEnd: Event;
  MSGestureHold: Event;
  MSGestureStart: Event;
  MSGestureTap: Event;
  MSInertiaStart: Event;
  MSPointerCancel: Event;
  MSPointerDown: Event;
  MSPointerEnter: Event;
  MSPointerLeave: Event;
  MSPointerMove: Event;
  MSPointerOut: Event;
  MSPointerOver: Event;
  MSPointerUp: Event;
  offline: Event;
  online: Event;
  orientationchange: Event;
  pagehide: PageTransitionEvent;
  pageshow: PageTransitionEvent;
  pause: Event;
  play: Event;
  playing: Event;
  popstate: PopStateEvent;
  progress: ProgressEvent<Window>;
  ratechange: Event;
  readystatechange: ProgressEvent<Window>;
  reset: Event;
  resize: UIEvent;
  scroll: Event;
  seeked: Event;
  seeking: Event;
  select: Event;
  stalled: Event;
  storage: StorageEvent;
  submit: Event;
  suspend: Event;
  timeupdate: Event;
  unload: Event;
  volumechange: Event;
  vrdisplayactivate: Event;
  vrdisplayblur: Event;
  vrdisplayconnect: Event;
  vrdisplaydeactivate: Event;
  vrdisplaydisconnect: Event;
  vrdisplayfocus: Event;
  vrdisplaypointerrestricted: Event;
  vrdisplaypointerunrestricted: Event;
  vrdisplaypresentchange: Event;
  waiting: Event;
}
